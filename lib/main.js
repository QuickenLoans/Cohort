/*jshint forin:false strict:false*/
/*globals __dirname console module process require*/
var child_process = require("child_process")
  , cleancss      = require("clean-css")
  , fs            = require("fs")
  , jshint        = require("jshint").JSHINT
  , less          = require("less")

  , coffee        = require("./coffee.js")
  , uglifier      = require("./uglifier.js")

  , cohorts
  , signifer;


// A Munifex is "basic legionary - the lowest of the trained rank and file"
// logger function
function munifex (str) {
  console.log("Cohort says, '" + str + "'.");
}

// An Cornicen was the "horn blower or signaler"
// file-writer factory
function cornicen (path, pre) {
  return function (data) {
    fs.writeFile(path, (pre || "") + data);
  };
}

// be ye careful, here be dragons - danger in the form of recursion
// A Praetor was an "appointed military commander of a legion or grouping of legions"
// recursion factory
function praetor (tasks, fn, done, acc) {
  if (!tasks || !tasks.length) {
    done(acc);
  } else {
    fn(tasks[0], function (acc) {
      praetor(tasks.slice(1), fn, done, acc);
    }, acc);
  }
}

// An Optio was a (second) commander of a Roman century division of soldiers
// task list formatter
function optio (obj) {
  return Object.keys(obj)
    .map(function (item) {
      return {task: item, config: obj[item]};
    });
}


cohorts = {
  commands: function cohort_functions_cmd (tasks, done) {
    munifex(tasks[0]);
    child_process
      .exec(tasks[0], function (err, stdout) {
        if (err) {
          throw err;
        } else {
          console.log(stdout);
          tasks.slice(1).length ? cohorts.commands(tasks.slice(1), done) : done();
        }
      });
  }
  , files: function cohort_functions_css (tasks, done) {
    munifex("starting files");

    praetor(optio(tasks), function (head, done) {
      praetor(head.config, function (file, done, acc) {
        fs.readFile(file, "utf-8", function (err, data) {
          if (err) {
            munifex("This file caused the error: " + file);
            throw err;
          } else {
            signifer[/\.(.+)$/.exec(file)[1]](data, function (data) {
              done(acc + "\n\n" + data);
            });
          }
        });
      }, function (acc) {
        cornicen(head.task)(acc);
        done();
      }, "/* Cohorts CSS compilation */");
    }, function () {
      munifex("files complete.");
      done();
    });
  }
  // , html: function () {}
  // , img: function () {}
  // , test: function () {}
};

// A Signifer "handled financial matters and decorations"
// handles filetype transformations
signifer  = {
    coffee: function (input, done) {
      done("// coffee not implemented yet in signifer.\n\n");
    }
    ,css: function (input, done) {
      done(cleancss.process(input));
    }
    ,js: function (input, done) {
      if (/Generated by CoffeeScript/i.test(input) || jshint(input)) {
        done(input);
      } else {
        throw new Error("File did not pass jshint");
      }
    }
    ,less: function (input, done) {
      less.Parser({paths: ["./src/less"]})
        .parse(input, function (err, tree) {
          if (err) {
            throw err;
          } else {
            done(tree.toCSS({compress: true}));
          }
        });
    }
    ,sass: function (input, done) {
      done("// sass not implemented yet in signifer.");
    }
  };


module.exports = function (config) {
  if (/init/i.test(process.argv[2])) {
    cohorts.commands(config.init, function () {
      munifex("Project initialized.");
    });
  }
  delete config.init;

  praetor(optio(config), function (head, done) {
    head.task in cohorts ? cohorts[head.task](head.config, done) : done();
  }, function () {
    cohorts.commands(["rm -rf " + config.cleanup.join(" ")], function () {
      munifex("I'm all done.");
    });
  });
};
