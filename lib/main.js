/*jshint forin:false laxcomma:true strict:false*/
/*globals console module process require*/
var child_process = require("child_process")
  , cleancss      = require("clean-css")
  , coffee        = require("coffee-script")
  , fs            = require("fs")
  , jshint        = require("jshint").JSHINT
  , jsh_options   = fs.readFileSync(process.env.PWD + "/.jshintrc", "utf-8")
  , less          = require("less")
  , sass          = require('node-sass')

  , uglifier      = require("./uglifier.js")

  , cohorts
  , optio
  , signifer;

// A Munifex is "basic legionary - the lowest of the trained rank and file"
// logger function
function munifex (str, error) {
  console.log(error ? str : "Cohort says, '$'.".replace("$", str));
}

// be ye careful, here be dragons - danger in the form of recursion
// A Praetor was an "appointed military commander of a legion or grouping of legions"
// recursion with CPS
function praetor (tasks, fn, done, acc) {
  /*
    tasks - an array of tasks to recurse over applying the function passed-in as "fn"
    fn - the operation to perform on each recursion
    done - the function to call when recursion is complete
    acc - accumulator for concatenating output of recursion
  */
  if (!tasks || !tasks.length) {
    done(acc);
  } else {
    fn(tasks[0], function (acc) {
      praetor(tasks.slice(1), fn, done, acc);
    }, acc);
  }
}

// The Tirones were "new recruit to the legions, a novice"
// file(path) extension
function tirones (str) {
  return (/\.(.+)$/).exec(str)[1];
}


cohorts = {
  commands: function cohort_commands (tasks, done) {
    munifex(tasks[0]);
    child_process
      .exec(tasks[0], function (err, stdout) {
        if (err) {
          munifex("An error occurred while attempting to execute '" + tasks[0] + "'", true);
          throw err;
        } else {
          tasks.slice(1).length ? cohort_commands(tasks.slice(1), done) : done();
        }
      });
  }
  , files: function cohort_files (tasks, done) {
    munifex("starting files");

    praetor(tasks, function (task, done) {
      praetor(task[1], function (file, done, acc) {
        fs.readFile(file, "utf-8", function (err, data) {
          if (err) {
            munifex("This file caused the error: " + file);
            throw err;
          } else {
            signifer[tirones(file)](file, data, function (data) {
              done(acc + "\n\n" + data);
            });
          }
        });
      }, function (acc) {
        optio[tirones(task[0])](acc, function (data) {
          fs.writeFile(task[0], data, "utf-8", done);
        });
      }, "/*! Cohort file compilation */\n");
    }, function () {
      munifex("files complete.");
      done();
    });
  }
  // , html: function () {} // combine into "files"
  // , img: function () {} // combine into "files"
  // , test: function () {} // combine into "commands"
};

// The Optio is "second on command for the centurion"
// minifiers
optio = {
  css: function optio_css (input, done) {
    done(cleancss.process(input));
  }

  ,js: function optio_js (input, done) {
    done(uglifier(input));
  }

};

// A Signifer "handled financial matters and decorations"
// handles filetype transformations
signifer  = {
  coffee: function signifer_coffee (path, input, done) {
    done(coffee.compile(input));
  }
  ,css: function signifer_css (path, input, done) {
    done(cleancss.process(input));
  }
  ,js: function signifer_js (path, input, done) {
    if (/Generated by CoffeeScript/i.test(input) || jshint(input, JSON.parse(jsh_options))) {
      done(input);
    } else {
      munifex("JSHint found these issue(s) with " + path + ".", true);
      munifex(jshint.errors.map(function (item) {
        return "(" + item.line + ":" + item.character + ") - " + item.reason;
      }), true);
    }
  }
  ,less: function signifer_less (path, input, done) {
    try {
      less.Parser({paths: ["./" + path.split("/").slice(0, -1).join("/")]})
        .parse(input, function (err, tree) {
          if (err) {
            munifex("Parse error " + path);
            throw err;
          } else {
            done(tree.toCSS({compress: true}));
          }
        });
    } catch (err) {
      munifex("Read error " + path);
      throw err;
    }
  }
  ,scss: function signifer_scss (path, input, done) {
    try {
      sass.render(input, function (err, data) {
        if (err) {
          munifex("Parse error " + path);
          throw err;
        } else {
          done(data);
        }
      });
    } catch (err) {
      munifex("Read error " + path);
      throw err;
    }
  }
};


module.exports = function (config, init) {
  if (/init/i.test(process.argv[2])) {
    cohorts.commands(init, function () {
      munifex("Project initialized.");
    });
  }

  praetor(config, function (task, done, acc) {
    cohorts[(/array/i).test({}.toString.call(task[0])) ? "files" : "commands"](task, done, acc);
  }, function () {
    munifex("", true);
    munifex("I'm all done.");
  });
};
